{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nimport { sportsSlice, deleteSport } from \"./data/sports\";\nimport { leaguesSlice, deleteLeague } from \"./data/leagues\";\n\nconst fulfilledNew = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledUpdated = state => state.alerts.push({\n  message: \"The object was successfully updated in the system.\",\n  variant: \"success\"\n});\n\nconst fulfilledDeleted = state => state.alerts.push({\n  message: \"The object was successfully deleted in the system.\",\n  variant: \"success\"\n});\n\nconst rejected = state => state.alerts.push({\n  message: \"The action could not be completed at this time.\",\n  variant: \"danger\"\n}); // const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\n\nfunction alerts(state = {\n  alerts: []\n}, action) {\n  const new_action = action.type === \"alerts/dismissAlert\" ? action.type : action.type.split(\"/\").pop();\n\n  switch (new_action) {\n    case \"fulfilled\":\n      return fulfilledNew(state);\n\n    case \"alerts/dismissAlert\":\n      let alerts = [];\n      return {\n        alerts\n      };\n\n    default:\n      console.log(action.type);\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: \"\",\n    redirect: false\n  },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    }\n  }\n}); // const s = {\n//   objects: [],\n//   status: \"idle\",\n//   error: null,\n//   object: null,\n// };\n// const generalSlice = createSlice({\n//   name: \"general\",\n//   initialState: s,\n//   reducers: {},\n//   extraReducers: {\n//     [fetchObjects.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchObjects.fulfilled]: (state, action) => {\n//       state.objects = action.payload.data;\n//       state.status = \"succeeded\";\n//     },\n//     [fetchObjects.rejected]: (state, action) => {\n//       state.error = action.error;\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    error: null,\n    selected: null\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `sports/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      default:\n        return state;\n    }\n  };\n}\n\nvar neww = createTableReducer(\"sports\");\nconst reducer = combineReducers({\n  sports: neww,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n  leagues: leaguesSlice.reducer // general: generalSlice.reducer,\n\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/Reducers.js"],"names":["combineReducers","dismissAlert","createSlice","createAction","sportsSlice","deleteSport","leaguesSlice","deleteLeague","fulfilledNew","state","alerts","concat","message","variant","fulfilledUpdated","push","fulfilledDeleted","rejected","action","new_action","type","split","pop","console","log","redirectionSlice","name","initialState","link","redirect","reducers","extraReducers","fulfilled","createTableReducer","status","error","selected","reducer","Object","assign","payload","data","neww","sports","redirections","leagues"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport { dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nimport { sportsSlice, deleteSport } from \"./data/sports\";\nimport { leaguesSlice, deleteLeague } from \"./data/leagues\";\n\nconst fulfilledNew = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledUpdated = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\",\n  });\n\nconst fulfilledDeleted = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\",\n  });\n\nconst rejected = (state) =>\n  state.alerts.push({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n  });\n\n// const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\nfunction alerts(state = { alerts: [] }, action) {\n  const new_action =\n    action.type === \"alerts/dismissAlert\"\n      ? action.type\n      : action.type.split(\"/\").pop();\n  switch (new_action) {\n    case \"fulfilled\":\n      return fulfilledNew(state);\n    case \"alerts/dismissAlert\":\n      let alerts = [];\n      return { alerts };\n    default:\n      console.log(action.type);\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: \"\", redirect: false },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    },\n  },\n});\n\n// const s = {\n//   objects: [],\n//   status: \"idle\",\n//   error: null,\n//   object: null,\n// };\n// const generalSlice = createSlice({\n//   name: \"general\",\n//   initialState: s,\n//   reducers: {},\n//   extraReducers: {\n//     [fetchObjects.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchObjects.fulfilled]: (state, action) => {\n//       state.objects = action.payload.data;\n//       state.status = \"succeeded\";\n//     },\n//     [fetchObjects.rejected]: (state, action) => {\n//       state.error = action.error;\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    error: null,\n    selected: null,\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `sports/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\",\n        });\n      default:\n        return state;\n    }\n  };\n}\n\nvar neww = createTableReducer(\"sports\");\n\nconst reducer = combineReducers({\n  sports: neww,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n  leagues: leaguesSlice.reducer,\n  // general: generalSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}