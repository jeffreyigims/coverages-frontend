{"ast":null,"code":"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport { fetchCoverage, updateCoverage, deleteCoverage, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateCoverages = values => {\n      console.log(\"Update\");\n    };\n\n    this.deleteCoverages = values => {\n      console.log(\"Delete\");\n    };\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","PropTypes","coverages","formHelpers","CoverageDetails","fetchCoverage","updateCoverage","deleteCoverage","fetchCarriers","fetchBrokers","CoverageContainer","updateCoverages","values","console","log","deleteCoverages","componentDidMount","id","props","match","params","dispatch","render","propTypes","selected","object","isRequired","status","string","error","link","redirect","bool","mapStateToProps","state","carriers","brokers","redirections"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,qBAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,aADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,aAJF,EAKEC,YALF,QAMO,uBANP;;AAQA,MAAMC,iBAAN,SAAgCX,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SAQxCY,eARwC,GAQrBC,MAAD,IAAY;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAVuC;;AAAA,SAYxCC,eAZwC,GAYrBH,MAAD,IAAY;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAduC;AAAA;;AACxCE,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAjC;AACA,SAAKC,KAAL,CAAWG,QAAX,CAAoBhB,aAAa,CAACY,EAAD,CAAjC;AACA,SAAKC,KAAL,CAAWG,QAAX,CAAoBb,aAAa,EAAjC;AACA,SAAKU,KAAL,CAAWG,QAAX,CAAoBZ,YAAY,EAAhC;AACD;;AAUDa,EAAAA,MAAM,GAAG;AACP,wBACE,yCADF;AAcD;;AA/BuC;;AAkC1CZ,iBAAiB,CAACa,SAAlB,GAA8B;AAC5BC,EAAAA,QAAQ,EAAEvB,SAAS,CAACwB,MAAV,CAAiBC,UADC;AAE5BC,EAAAA,MAAM,EAAE1B,SAAS,CAAC2B,MAAV,CAAiBF,UAFG;AAG5BG,EAAAA,KAAK,EAAE5B,SAAS,CAAC2B,MAAV,CAAiBF,UAHI;AAI5BI,EAAAA,IAAI,EAAE7B,SAAS,CAAC2B,MAJY;AAK5BG,EAAAA,QAAQ,EAAE9B,SAAS,CAAC+B;AALQ,CAA9B;;AAQA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AAAEV,IAAAA,QAAF;AAAYG,IAAAA,MAAZ;AAAoBE,IAAAA;AAApB,MAA8BK,KAAK,CAAChC,SAA1C;AACA,QAAM;AAAEiC,IAAAA;AAAF,MAAeD,KAAK,CAACC,QAA3B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcF,KAAK,CAACE,OAA1B;AACA,QAAM;AAAEN,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBG,KAAK,CAACG,YAAjC;AACA,SAAO;AAAEb,IAAAA,QAAF;AAAYG,IAAAA,MAAZ;AAAoBE,IAAAA,KAApB;AAA2BC,IAAAA,IAA3B;AAAiCC,IAAAA,QAAjC;AAA2CI,IAAAA,QAA3C;AAAqDC,IAAAA;AAArD,GAAP;AACD;;AAED,eAAepC,OAAO,CAACiC,eAAD,CAAP,CAAyBvB,iBAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport {\n  fetchCoverage,\n  updateCoverage,\n  deleteCoverage,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  updateCoverages = (values) => {\n    console.log(\"Update\")\n  }\n\n  deleteCoverages = (values) => {\n    console.log(\"Delete\")\n  }\n\n  render() {\n    return (\n      <>\n        {/* <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.props.brokers}\n          status={this.props.status}\n          formHelpers={formHelpers}\n          updateObject={(values) => updateCoverage(values)}\n          deleteObject={(values) => deleteCoverage(values)}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        /> */}\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}