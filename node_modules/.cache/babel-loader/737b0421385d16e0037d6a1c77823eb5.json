{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { dismissAlert, deleteSport, deleteLeague, deleteClub, deleteGroup, deleteCategory, deleteCarrier, deleteCompany, deleteUser } from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst fulfilledNew = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledUpdated = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledDeleted = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst rejected = (state, action) => {\n  let alerts = state.alerts.concat({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n    errors: action.payload\n  });\n  return {\n    alerts\n  };\n};\n\nfunction alerts(state = {\n  alerts: []\n}, action) {\n  if (action.type === \"alerts/dismissAlert\") {\n    return {\n      alerts: []\n    };\n  }\n\n  const status = action.type.split(\"/\").pop();\n  const new_action = action.type.split(\"/\")[1].split(\"_\")[0];\n\n  if (status === \"rejected\" && new_action !== \"fetch\" && new_action !== \"get\") {\n    return rejected(state, action);\n  }\n\n  if (status === \"pending\") {\n    return state;\n  }\n\n  switch (new_action) {\n    case \"post\":\n      return fulfilledNew(state);\n\n    case \"update\":\n      return fulfilledUpdated(state);\n\n    case \"delete\":\n      return fulfilledDeleted(state);\n\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: \"\",\n    redirect: false\n  },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    },\n    [deleteClub.fulfilled]: (state, action) => {\n      state.link = \"/clubs\";\n      state.redirect = true;\n    },\n    [deleteGroup.fulfilled]: (state, action) => {\n      state.link = \"/groups\";\n      state.redirect = true;\n    },\n    [deleteCategory.fulfilled]: (state, action) => {\n      state.link = \"/categories\";\n      state.redirect = true;\n    },\n    [deleteCarrier.fulfilled]: (state, action) => {\n      state.link = \"/carriers\";\n      state.redirect = true;\n    },\n    [deleteCompany.fulfilled]: (state, action) => {\n      state.link = \"/companies\";\n      state.redirect = true;\n    },\n    [deleteUser.fulfilled]: (state, action) => {\n      state.link = \"/users\";\n      state.redirect = true;\n    }\n  }\n});\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    errors: null,\n    selected: null\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `${name}/fetch_${name}/pending`:\n        return Object.assign({}, state, {\n          status: \"loading\"\n        });\n\n      case `${name}/fetch_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/post_${name}/rejected`:\n        return Object.assign({}, state, {\n          [name]: state[name],\n          error: action.payload\n        });\n\n      case `${name}/post_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: state[name].concat(action.payload.data),\n          status: \"succeeded\"\n        });\n\n      case `${name}/get_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/get_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/update_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/update_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/delete_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/delete_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          status: \"succeeded\"\n        });\n\n      default:\n        return state;\n    }\n  };\n}\n\nconst reducer = combineReducers({\n  sports: createTableReducer(\"sports\"),\n  leagues: createTableReducer(\"leagues\"),\n  clubs: createTableReducer(\"clubs\"),\n  groups: createTableReducer(\"groups\"),\n  club_groups: createTableReducer(\"club_groups\"),\n  companies: createTableReducer(\"companies\"),\n  brokers: createTableReducer(\"brokers\"),\n  carriers: createTableReducer(\"carriers\"),\n  users: createTableReducer(\"users\"),\n  categories: createTableReducer(\"categories\"),\n  coverages: createTableReducer(\"coverages\"),\n  alerts: alerts,\n  redirections: redirectionSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/Reducers.js"],"names":["combineReducers","dismissAlert","deleteSport","deleteLeague","deleteClub","deleteGroup","deleteCategory","deleteCarrier","deleteCompany","deleteUser","createSlice","fulfilledNew","state","alerts","concat","message","variant","fulfilledUpdated","fulfilledDeleted","rejected","action","errors","payload","type","status","split","pop","new_action","redirectionSlice","name","initialState","link","redirect","reducers","extraReducers","fulfilled","createTableReducer","selected","reducer","Object","assign","data","error","sports","leagues","clubs","groups","club_groups","companies","brokers","carriers","users","categories","coverages","redirections"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport {\n  dismissAlert,\n  deleteSport,\n  deleteLeague,\n  deleteClub,\n  deleteGroup,\n  deleteCategory,\n  deleteCarrier,\n  deleteCompany,\n  deleteUser,\n} from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst fulfilledNew = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledUpdated = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledDeleted = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst rejected = (state, action) => {\n  let alerts = state.alerts.concat({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n    errors: action.payload\n  });\n  return { alerts };\n};\n\nfunction alerts(state = { alerts: [] }, action) {\n  if (action.type === \"alerts/dismissAlert\") {\n    return { alerts: [] };\n  }\n  const status = action.type.split(\"/\").pop();\n  const new_action = action.type.split(\"/\")[1].split(\"_\")[0];\n  if (status === \"rejected\" && new_action !== \"fetch\" && new_action !== \"get\") {\n    return rejected(state, action);\n  }\n  if (status === \"pending\") {\n    return state;\n  }\n  switch (new_action) {\n    case \"post\":\n      return fulfilledNew(state);\n    case \"update\":\n      return fulfilledUpdated(state);\n    case \"delete\":\n      return fulfilledDeleted(state);\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: \"\", redirect: false },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    },\n    [deleteClub.fulfilled]: (state, action) => {\n      state.link = \"/clubs\";\n      state.redirect = true;\n    },\n    [deleteGroup.fulfilled]: (state, action) => {\n      state.link = \"/groups\";\n      state.redirect = true;\n    },\n    [deleteCategory.fulfilled]: (state, action) => {\n      state.link = \"/categories\";\n      state.redirect = true;\n    },\n    [deleteCarrier.fulfilled]: (state, action) => {\n      state.link = \"/carriers\";\n      state.redirect = true;\n    },\n    [deleteCompany.fulfilled]: (state, action) => {\n      state.link = \"/companies\";\n      state.redirect = true;\n    },\n    [deleteUser.fulfilled]: (state, action) => {\n      state.link = \"/users\";\n      state.redirect = true;\n    },\n  },\n});\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    errors: null,\n    selected: null,\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `${name}/fetch_${name}/pending`:\n        return Object.assign({}, state, {\n          status: \"loading\",\n        });\n      case `${name}/fetch_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/post_${name}/rejected`:\n        return Object.assign({}, state, {\n          [name]: state[name],\n          error: action.payload\n        });\n      case `${name}/post_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: state[name].concat(action.payload.data),\n          status: \"succeeded\",\n        });\n      case `${name}/get_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/get_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/update_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/update_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/delete_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/delete_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          status: \"succeeded\",\n        });\n      default:\n        return state;\n    }\n  };\n}\n\nconst reducer = combineReducers({\n  sports: createTableReducer(\"sports\"),\n  leagues: createTableReducer(\"leagues\"),\n  clubs: createTableReducer(\"clubs\"),\n  groups: createTableReducer(\"groups\"),\n  club_groups: createTableReducer(\"club_groups\"),\n  companies: createTableReducer(\"companies\"),\n  brokers: createTableReducer(\"brokers\"),\n  carriers: createTableReducer(\"carriers\"),\n  users: createTableReducer(\"users\"),\n  categories: createTableReducer(\"categories\"),\n  coverages: createTableReducer(\"coverages\"),\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}