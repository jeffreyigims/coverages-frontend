{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/survey/src/containers/AlertsContainer.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Alert, ListGroup } from \"react-bootstrap\";\nimport { dismissAlert } from \"../actions/Actions\";\n\nclass AlertsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.displayErrors = errors => {\n      for (var key in errors) {\n        return /*#__PURE__*/React.createElement(ListGroup.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9,\n            columnNumber: 14\n          }\n        }, errors[key]);\n      }\n    };\n\n    this.showAlerts = () => {\n      return this.props.alerts.map((alert, index) => {\n        return /*#__PURE__*/React.createElement(Alert, {\n          key: index,\n          variant: alert.variant,\n          onClose: () => this.props.dispatch(dismissAlert(index)),\n          dismissible: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 9\n          }\n        }, alert.message, /*#__PURE__*/React.createElement(ListGroup, {\n          variant: \"flush\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 11\n          }\n        }, this.displayErrors(alert.errors)));\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.showAlerts());\n  }\n\n}\n\nAlertsContainer.propTypes = {};\n\nfunction mapStateToProps(state) {\n  const {\n    alerts\n  } = state.alerts;\n  return {\n    alerts\n  };\n}\n\nexport default connect(mapStateToProps)(AlertsContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/containers/AlertsContainer.js"],"names":["React","connect","Alert","ListGroup","dismissAlert","AlertsContainer","Component","displayErrors","errors","key","showAlerts","props","alerts","map","alert","index","variant","dispatch","message","render","propTypes","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAEA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAC5CC,aAD4C,GAC3BC,MAAD,IAAY;AAC1B,WAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,4BAAO,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBA,MAAM,CAACC,GAAD,CAAvB,CAAP;AACD;AACF,KAL2C;;AAAA,SAO5CC,UAP4C,GAO/B,MAAM;AACjB,aAAO,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7C,4BACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAEA,KADP;AAEE,UAAA,OAAO,EAAED,KAAK,CAACE,OAFjB;AAGE,UAAA,OAAO,EAAE,MAAM,KAAKL,KAAL,CAAWM,QAAX,CAAoBb,YAAY,CAACW,KAAD,CAAhC,CAHjB;AAIE,UAAA,WAAW,MAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMGD,KAAK,CAACI,OANT,eAOE,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKX,aAAL,CAAmBO,KAAK,CAACN,MAAzB,CADH,CAPF,CADF;AAaD,OAdM,CAAP;AAeD,KAvB2C;AAAA;;AAyB5CW,EAAAA,MAAM,GAAG;AACP,wBAAO,0CAAG,KAAKT,UAAL,EAAH,CAAP;AACD;;AA3B2C;;AA8B9CL,eAAe,CAACe,SAAhB,GAA4B,EAA5B;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AAAEV,IAAAA;AAAF,MAAaU,KAAK,CAACV,MAAzB;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD;;AAED,eAAeX,OAAO,CAACoB,eAAD,CAAP,CAAyBhB,eAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Alert, ListGroup } from \"react-bootstrap\";\nimport { dismissAlert } from \"../actions/Actions\";\n\nclass AlertsContainer extends React.Component {\n  displayErrors = (errors) => {\n    for (var key in errors) {\n      return <ListGroup.Item>{errors[key]}</ListGroup.Item>;\n    }\n  };\n\n  showAlerts = () => {\n    return this.props.alerts.map((alert, index) => {\n      return (\n        <Alert\n          key={index}\n          variant={alert.variant}\n          onClose={() => this.props.dispatch(dismissAlert(index))}\n          dismissible\n        >\n          {alert.message}\n          <ListGroup variant=\"flush\">\n            {this.displayErrors(alert.errors)}\n          </ListGroup>\n        </Alert>\n      );\n    });\n  };\n\n  render() {\n    return <>{this.showAlerts()}</>;\n  }\n}\n\nAlertsContainer.propTypes = {};\n\nfunction mapStateToProps(state) {\n  const { alerts } = state.alerts;\n  return { alerts };\n}\n\nexport default connect(mapStateToProps)(AlertsContainer);\n"]},"metadata":{},"sourceType":"module"}