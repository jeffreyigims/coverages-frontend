{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports, postSport, fetchSport, updateSport, deleteSport, dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.sports.map(sport => sport.attributes.id != action.id);\n      state.status = \"succeeded\";\n    }\n  }\n});\n\nconst fulfilled = state => state.alerts.push({\n  message: \"The object was successfully added to the system.\",\n  variant: \"success\"\n});\n\nconst rejected = state => state.alerts.push({\n  message: \"The object could not be added to the system at this time.\",\n  variant: \"danger\"\n});\n\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: {\n    alerts: []\n  },\n  reducers: {},\n  extraReducers: {\n    [updateSport.fulfilled]: (state, action) => {\n      fulfilled(state);\n    },\n    [updateSport.rejected]: (state, action) => {\n      rejected(state);\n    },\n    [dismissAlert]: (state, action) => {\n      state.alerts.splice(action.payload, 1);\n    }\n  }\n});\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: []\n  },\n  reducers: {},\n  extraReducers: {//   [deleteSport.fulfilled]: (state, action) => {\n    //     state.sports.remove(action.payload);\n    //     state.status = \"succeeded\";\n    //   },\n  }\n});\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alertsSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","postSport","fetchSport","updateSport","deleteSport","dismissAlert","createSlice","createAction","initialState","sports","status","error","selected","sportsSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","push","map","sport","attributes","id","alerts","message","variant","alertsSlice","splice","redirectionSlice","link","reducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport {\n  fetchSports,\n  postSport,\n  fetchSport,\n  updateSport,\n  deleteSport,\n  dismissAlert,\n} from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null,\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.sports.map((sport) => sport.attributes.id != action.id);\n      state.status = \"succeeded\";\n    },\n  },\n});\n\nconst fulfilled = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n\nconst rejected = (state) =>\n  state.alerts.push({\n    message: \"The object could not be added to the system at this time.\",\n    variant: \"danger\",\n  });\n\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: { alerts: [] },\n  reducers: {},\n  extraReducers: {\n    [updateSport.fulfilled]: (state, action) => {\n      fulfilled(state);\n    },\n    [updateSport.rejected]: (state, action) => {\n      rejected(state);\n    },\n    [dismissAlert]: (state, action) => {\n      state.alerts.splice(action.payload, 1);\n    },\n  },\n});\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: [] },\n  reducers: {},\n  extraReducers: {\n    //   [deleteSport.fulfilled]: (state, action) => {\n    //     state.sports.remove(action.payload);\n    //     state.status = \"succeeded\";\n    //   },\n  },\n});\n\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alertsSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}