{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DetailStructure from \"../../components/DetailStructure\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport GeneralTable from \"../../components/GeneralTable\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport { companyForm as form } from \"../../utils/Forms\";\nimport { CoverageDetails } from \"./CoverageDetails\";\nimport { fetchCompany, updateCompany, deleteCompany, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCompany(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CoverageDetails, {\n      object: this.props.selected,\n      carriers: this.props.carriers,\n      brokers: this.state.brokers,\n      status: this.props.status,\n      name: this.state.name,\n      formHelpers: formHelpers,\n      form: form,\n      showDetails: this.showDetails,\n      updateObject: (id, values) => {\n        this.props.dispatch(updateCompany({\n          id: id,\n          values: values\n        }));\n      },\n      deleteObject: id => {\n        this.props.dispatch(deleteCompany(id));\n      },\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","DetailStructure","PropTypes","Button","GeneralTable","coverages","formHelpers","companyForm","form","CoverageDetails","fetchCompany","updateCompany","deleteCompany","fetchCarriers","fetchBrokers","CoverageContainer","componentDidMount","id","props","match","params","dispatch","render","selected","carriers","state","brokers","status","name","showDetails","values","link","redirect","propTypes","object","isRequired","string","error","bool","mapStateToProps","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DetailStructure from \"../../components/DetailStructure\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport GeneralTable from \"../../components/GeneralTable\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport { companyForm as form } from \"../../utils/Forms\";\nimport { CoverageDetails } from \"./CoverageDetails\";\nimport {\n  fetchCompany,\n  updateCompany,\n  deleteCompany,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCompany(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return (\n      <>\n        <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.state.brokers}\n          status={this.props.status}\n          name={this.state.name}\n          formHelpers={formHelpers}\n          form={form}\n          showDetails={this.showDetails}\n          updateObject={(id, values) => {\n            this.props.dispatch(updateCompany({ id: id, values: values }));\n          }}\n          deleteObject={(id) => {\n            this.props.dispatch(deleteCompany(id));\n          }}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}