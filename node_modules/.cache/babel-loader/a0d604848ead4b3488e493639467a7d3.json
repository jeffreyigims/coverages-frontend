{"ast":null,"code":"function resolve(response) {\n  return response;\n}\n\nfunction reject(response) {\n  return response;\n}\n\nexport function runAjax(link, method = \"GET\", data = {}, rejectWithValue = {}) {\n  var promiseObject = new Promise(async function (resolve, reject) {\n    let options;\n\n    if (method === \"GET\") {\n      options = {\n        method: \"GET\"\n      };\n      link = link + \"?\" + new URLSearchParams(data);\n    } else {\n      options = {\n        method: method,\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n      };\n    }\n\n    let response = await fetch(link, options);\n    console.log(response);\n    const r = response;\n\n    if (!response.ok) {\n      let res = await response.json().catch(error => {\n        resolve(rejectWithValue(error));\n      });\n      return resolve(rejectWithValue(r.statusText));\n    } // if (method === \"DELETE\") {\n    //   return \"Success\";\n    // }\n\n\n    return resolve(response.json());\n  }); // console.log(promiseObject)\n\n  return promiseObject;\n} // export function runAjax(link, method = \"GET\", data = {}) {\n//   var promiseObject = new Promise(async function (resolve, reject) {\n//     let options;\n//     if (method == \"GET\") {\n//       options = { method: method };\n//     } else {\n//       options = {\n//         method: method,\n//         body: JSON.stringify(data),\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         credentials: \"same-origin\",\n//       };\n//     }\n//\n//     fetch(link, options)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw response;\n//         }\n//         return reject(response.json());\n//       })\n//       .then((result) => {\n//         // callback(result);\n//       })\n//       .catch((error) => {\n//         if (error.statusText) {\n//           reject(error)\n//         }\n//       });\n//   });\n// }","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/utils/APIUtils.js"],"names":["resolve","response","reject","runAjax","link","method","data","rejectWithValue","promiseObject","Promise","options","URLSearchParams","body","JSON","stringify","headers","credentials","fetch","console","log","r","ok","res","json","catch","error","statusText"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,SAAOA,QAAP;AACD;;AAED,SAASC,MAAT,CAAgBD,QAAhB,EAA0B;AACxB,SAAOA,QAAP;AACD;;AAED,OAAO,SAASE,OAAT,CAAiBC,IAAjB,EAAuBC,MAAM,GAAG,KAAhC,EAAuCC,IAAI,GAAG,EAA9C,EAAkDC,eAAe,GAAG,EAApE,EAAwE;AAC7E,MAAIC,aAAa,GAAG,IAAIC,OAAJ,CAAY,gBAAgBT,OAAhB,EAAyBE,MAAzB,EAAiC;AAC/D,QAAIQ,OAAJ;;AACA,QAAIL,MAAM,KAAK,KAAf,EAAsB;AACpBK,MAAAA,OAAO,GAAG;AACRL,QAAAA,MAAM,EAAE;AADA,OAAV;AAGAD,MAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAa,IAAIO,eAAJ,CAAoBL,IAApB,CAApB;AACD,KALD,MAKO;AACLI,MAAAA,OAAO,GAAG;AACRL,QAAAA,MAAM,EAAEA,MADA;AAERO,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFE;AAGRS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAHD;AAMRC,QAAAA,WAAW,EAAE;AANL,OAAV;AAQD;;AAED,QAAIf,QAAQ,GAAG,MAAMgB,KAAK,CAACb,IAAD,EAAOM,OAAP,CAA1B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACA,UAAMmB,CAAC,GAAGnB,QAAV;;AACA,QAAI,CAACA,QAAQ,CAACoB,EAAd,EAAkB;AAChB,UAAIC,GAAG,GAAG,MAAMrB,QAAQ,CAACsB,IAAT,GAAgBC,KAAhB,CAAuBC,KAAD,IAAW;AAC/CzB,QAAAA,OAAO,CAACO,eAAe,CAACkB,KAAD,CAAhB,CAAP;AACD,OAFe,CAAhB;AAGA,aAAOzB,OAAO,CAACO,eAAe,CAACa,CAAC,CAACM,UAAH,CAAhB,CAAd;AACD,KA1B8D,CA2B/D;AACA;AACA;;;AACA,WAAO1B,OAAO,CAACC,QAAQ,CAACsB,IAAT,EAAD,CAAd;AACD,GA/BmB,CAApB,CAD6E,CAiC7E;;AACA,SAAOf,aAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["function resolve(response) {\n  return response;\n}\n\nfunction reject(response) {\n  return response;\n}\n\nexport function runAjax(link, method = \"GET\", data = {}, rejectWithValue = {}) {\n  var promiseObject = new Promise(async function (resolve, reject) {\n    let options;\n    if (method === \"GET\") {\n      options = {\n        method: \"GET\",\n      };\n      link = link + \"?\" + new URLSearchParams(data);\n    } else {\n      options = {\n        method: method,\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"same-origin\",\n      };\n    }\n\n    let response = await fetch(link, options);\n    console.log(response);\n    const r = response\n    if (!response.ok) {\n      let res = await response.json().catch((error) => {\n        resolve(rejectWithValue(error));\n      });\n      return resolve(rejectWithValue(r.statusText));\n    }\n    // if (method === \"DELETE\") {\n    //   return \"Success\";\n    // }\n    return resolve(response.json());\n  });\n  // console.log(promiseObject)\n  return promiseObject;\n}\n\n// export function runAjax(link, method = \"GET\", data = {}) {\n//   var promiseObject = new Promise(async function (resolve, reject) {\n//     let options;\n//     if (method == \"GET\") {\n//       options = { method: method };\n//     } else {\n//       options = {\n//         method: method,\n//         body: JSON.stringify(data),\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         credentials: \"same-origin\",\n//       };\n//     }\n//\n//     fetch(link, options)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw response;\n//         }\n//         return reject(response.json());\n//       })\n//       .then((result) => {\n//         // callback(result);\n//       })\n//       .catch((error) => {\n//         if (error.statusText) {\n//           reject(error)\n//         }\n//       });\n//   });\n// }\n"]},"metadata":{},"sourceType":"module"}