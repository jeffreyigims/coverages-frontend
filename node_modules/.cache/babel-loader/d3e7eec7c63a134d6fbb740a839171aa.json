{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports, fetchLeagues, postSport, fetchSport, updateSport, deleteSport, dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState: {\n    sports: [],\n    status: \"idle\",\n    error: null,\n    selected: null\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n    }\n  }\n});\nconst leaguesSlice = createSlice({\n  name: \"leagues\",\n  initialState: {\n    leagues: [],\n    status: \"idle\",\n    error: null,\n    selected: null\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchLeagues.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchLeagues.fulfilled]: (state, action) => {\n      state.leagues = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchLeagues.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    }\n  }\n});\n\nconst fulfilledNew = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledUpdated = state => state.alerts.push({\n  message: \"The object was successfully updated in the system.\",\n  variant: \"success\"\n});\n\nconst fulfilledDeleted = state => state.alerts.push({\n  message: \"The object was successfully deleted in the system.\",\n  variant: \"success\"\n});\n\nconst rejected = state => state.alerts.push({\n  message: \"The action could not be completed at this time.\",\n  variant: \"danger\"\n}); // const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\n\nfunction alerts(state = {\n  alerts: []\n}, action) {\n  const new_action = action.type === \"alerts/dismissAlert\" ? action.type : action.type.split(\"/\").pop();\n\n  switch (new_action) {\n    case \"fulfilled\":\n      return fulfilledNew(state);\n\n    case \"alerts/dismissAlert\":\n      let alerts = [];\n      return {\n        alerts\n      };\n\n    default:\n      console.log(action.type);\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: \"\",\n    redirect: false\n  },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    }\n  }\n}); // const s = {\n//   objects: [],\n//   status: \"idle\",\n//   error: null,\n//   object: null,\n// };\n// const generalSlice = createSlice({\n//   name: \"general\",\n//   initialState: s,\n//   reducers: {},\n//   extraReducers: {\n//     [fetchObjects.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchObjects.fulfilled]: (state, action) => {\n//       state.objects = action.payload.data;\n//       state.status = \"succeeded\";\n//     },\n//     [fetchObjects.rejected]: (state, action) => {\n//       state.error = action.error;\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer // general: generalSlice.reducer,\n\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","fetchLeagues","postSport","fetchSport","updateSport","deleteSport","dismissAlert","createSlice","createAction","sportsSlice","name","initialState","sports","status","error","selected","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","push","leaguesSlice","leagues","fulfilledNew","alerts","concat","message","variant","fulfilledUpdated","fulfilledDeleted","new_action","type","split","pop","console","log","redirectionSlice","link","redirect","reducer","redirections"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport {\n  fetchSports,\n  fetchLeagues,\n  postSport,\n  fetchSport,\n  updateSport,\n  deleteSport,\n  dismissAlert,\n} from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\n\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState: {\n    sports: [],\n    status: \"idle\",\n    error: null,\n    selected: null,\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n    },\n  },\n});\n\nconst leaguesSlice = createSlice({\n  name: \"leagues\",\n  initialState: {\n    leagues: [],\n    status: \"idle\",\n    error: null,\n    selected: null,\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchLeagues.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchLeagues.fulfilled]: (state, action) => {\n      state.leagues = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchLeagues.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n  },\n});\n\nconst fulfilledNew = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledUpdated = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\",\n  });\n\nconst fulfilledDeleted = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\",\n  });\n\nconst rejected = (state) =>\n  state.alerts.push({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n  });\n\n// const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\nfunction alerts(state = { alerts: [] }, action) {\n  const new_action =\n    action.type === \"alerts/dismissAlert\"\n      ? action.type\n      : action.type.split(\"/\").pop();\n  switch (new_action) {\n    case \"fulfilled\":\n      return fulfilledNew(state);\n    case \"alerts/dismissAlert\":\n      let alerts = [];\n      return { alerts };\n    default:\n      console.log(action.type);\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: \"\", redirect: false },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n  },\n});\n\n// const s = {\n//   objects: [],\n//   status: \"idle\",\n//   error: null,\n//   object: null,\n// };\n// const generalSlice = createSlice({\n//   name: \"general\",\n//   initialState: s,\n//   reducers: {},\n//   extraReducers: {\n//     [fetchObjects.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchObjects.fulfilled]: (state, action) => {\n//       state.objects = action.payload.data;\n//       state.status = \"succeeded\";\n//     },\n//     [fetchObjects.rejected]: (state, action) => {\n//       state.error = action.error;\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n  // general: generalSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}