{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/companies/CompanyContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CompanyDetails from \"./CompanyDetails\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport GeneralTable from \"../../components/GeneralTable\";\nimport { companies as formHelpers } from \"../../utils/Schemas\";\nimport { companyForm as form } from \"../../utils/Forms\";\nimport { brokers as formHelpersBroker } from \"../../utils/Schemas\";\nimport { brokerForm as formBroker } from \"../../utils/Forms\";\nimport { fetchCompany, updateCompany, deleteCompany, postBroker } from \"../../actions/Actions\";\n\nclass CompanyContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"company\",\n      id: this.props.match.params.id\n    };\n\n    this.postSubBroker = values => {\n      const new_object = {\n        name: values.name,\n        company_id: this.props.selected.attributes.id\n      };\n      this.props.dispatch(postBroker(new_object));\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchCompany(this.state.id));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CompanyDetails, {\n      object: this.props.selected,\n      status: this.props.status,\n      name: this.state.name,\n      formHelpers: formHelpers,\n      form: form,\n      formHelpersBroker: formHelpersBroker,\n      formBroker: (values, handleChange, setFieldValue, errors) => formBroker(values, handleChange, setFieldValue, errors, this.props.selected.attributes),\n      postSub: values => this.postSubBroker(values),\n      updateObject: (id, values) => {\n        this.props.dispatch(updateCompany({\n          id: id,\n          values: values\n        }));\n      },\n      deleteObject: id => {\n        this.props.dispatch(deleteCompany(id));\n      },\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCompanyContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.companies;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect\n  };\n}\n\nexport default connect(mapStateToProps)(CompanyContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/companies/CompanyContainer.js"],"names":["React","Component","connect","CompanyDetails","PropTypes","Button","GeneralTable","companies","formHelpers","companyForm","form","brokers","formHelpersBroker","brokerForm","formBroker","fetchCompany","updateCompany","deleteCompany","postBroker","CompanyContainer","state","name","id","props","match","params","postSubBroker","values","new_object","company_id","selected","attributes","dispatch","componentDidMount","render","status","handleChange","setFieldValue","errors","link","redirect","propTypes","object","isRequired","string","error","bool","mapStateToProps","redirections"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,qBAAzC;AACA,SAASC,WAAW,IAAIC,IAAxB,QAAoC,mBAApC;AACA,SAASC,OAAO,IAAIC,iBAApB,QAA6C,qBAA7C;AACA,SAASC,UAAU,IAAIC,UAAvB,QAAyC,mBAAzC;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,QAKO,uBALP;;AAOA,MAAMC,gBAAN,SAA+BlB,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCmB,KADuC,GAC/B;AACNC,MAAAA,IAAI,EAAE,SADA;AAENC,MAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH;AAFtB,KAD+B;;AAAA,SAUvCI,aAVuC,GAUtBC,MAAD,IAAY;AAC1B,YAAMC,UAAU,GAAG;AACjBP,QAAAA,IAAI,EAAEM,MAAM,CAACN,IADI;AAEjBQ,QAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWO,QAAX,CAAoBC,UAApB,CAA+BT;AAF1B,OAAnB;AAIA,WAAKC,KAAL,CAAWS,QAAX,CAAoBd,UAAU,CAACU,UAAD,CAA9B;AACD,KAhBsC;AAAA;;AAMvCK,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,KAAL,CAAWS,QAAX,CAAoBjB,YAAY,CAAC,KAAKK,KAAL,CAAWE,EAAZ,CAAhC;AACD;;AAUDY,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE,oBAAC,cAAD;AACE,MAAA,MAAM,EAAE,KAAKX,KAAL,CAAWO,QADrB;AAEE,MAAA,MAAM,EAAE,KAAKP,KAAL,CAAWY,MAFrB;AAGE,MAAA,IAAI,EAAE,KAAKf,KAAL,CAAWC,IAHnB;AAIE,MAAA,WAAW,EAAEb,WAJf;AAKE,MAAA,IAAI,EAAEE,IALR;AAME,MAAA,iBAAiB,EAAEE,iBANrB;AAOE,MAAA,UAAU,EAAE,CAACe,MAAD,EAASS,YAAT,EAAuBC,aAAvB,EAAsCC,MAAtC,KACVxB,UAAU,CACRa,MADQ,EAERS,YAFQ,EAGRC,aAHQ,EAIRC,MAJQ,EAKR,KAAKf,KAAL,CAAWO,QAAX,CAAoBC,UALZ,CARd;AAgBE,MAAA,OAAO,EAAGJ,MAAD,IAAY,KAAKD,aAAL,CAAmBC,MAAnB,CAhBvB;AAiBE,MAAA,YAAY,EAAE,CAACL,EAAD,EAAKK,MAAL,KAAgB;AAC5B,aAAKJ,KAAL,CAAWS,QAAX,CAAoBhB,aAAa,CAAC;AAAEM,UAAAA,EAAE,EAAEA,EAAN;AAAUK,UAAAA,MAAM,EAAEA;AAAlB,SAAD,CAAjC;AACD,OAnBH;AAoBE,MAAA,YAAY,EAAGL,EAAD,IAAQ;AACpB,aAAKC,KAAL,CAAWS,QAAX,CAAoBf,aAAa,CAACK,EAAD,CAAjC;AACD,OAtBH;AAuBE,MAAA,WAAW,EAAE;AAAEiB,QAAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWgB,IAAnB;AAAyBC,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB;AAA9C,OAvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AA6BD;;AAhDsC;;AAmDzCrB,gBAAgB,CAACsB,SAAjB,GAA6B;AAC3BX,EAAAA,QAAQ,EAAE1B,SAAS,CAACsC,MAAV,CAAiBC,UADA;AAE3BR,EAAAA,MAAM,EAAE/B,SAAS,CAACwC,MAAV,CAAiBD,UAFE;AAG3BE,EAAAA,KAAK,EAAEzC,SAAS,CAACwC,MAAV,CAAiBD,UAHG;AAI3BJ,EAAAA,IAAI,EAAEnC,SAAS,CAACwC,MAJW;AAK3BJ,EAAAA,QAAQ,EAAEpC,SAAS,CAAC0C;AALO,CAA7B;;AAQA,SAASC,eAAT,CAAyB3B,KAAzB,EAAgC;AAC9B,QAAM;AAAEU,IAAAA,QAAF;AAAYK,IAAAA,MAAZ;AAAoBU,IAAAA;AAApB,MAA8BzB,KAAK,CAACb,SAA1C;AACA,QAAM;AAAEgC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBpB,KAAK,CAAC4B,YAAjC;AACA,SAAO;AAAElB,IAAAA,QAAF;AAAYK,IAAAA,MAAZ;AAAoBU,IAAAA,KAApB;AAA2BN,IAAAA,IAA3B;AAAiCC,IAAAA;AAAjC,GAAP;AACD;;AAED,eAAetC,OAAO,CAAC6C,eAAD,CAAP,CAAyB5B,gBAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CompanyDetails from \"./CompanyDetails\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport GeneralTable from \"../../components/GeneralTable\";\nimport { companies as formHelpers } from \"../../utils/Schemas\";\nimport { companyForm as form } from \"../../utils/Forms\";\nimport { brokers as formHelpersBroker } from \"../../utils/Schemas\";\nimport { brokerForm as formBroker } from \"../../utils/Forms\";\nimport {\n  fetchCompany,\n  updateCompany,\n  deleteCompany,\n  postBroker,\n} from \"../../actions/Actions\";\n\nclass CompanyContainer extends Component {\n  state = {\n    name: \"company\",\n    id: this.props.match.params.id,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchCompany(this.state.id));\n  }\n\n  postSubBroker = (values) => {\n    const new_object = {\n      name: values.name,\n      company_id: this.props.selected.attributes.id,\n    };\n    this.props.dispatch(postBroker(new_object));\n  };\n\n  render() {\n    return (\n      <>\n        <CompanyDetails\n          object={this.props.selected}\n          status={this.props.status}\n          name={this.state.name}\n          formHelpers={formHelpers}\n          form={form}\n          formHelpersBroker={formHelpersBroker}\n          formBroker={(values, handleChange, setFieldValue, errors) =>\n            formBroker(\n              values,\n              handleChange,\n              setFieldValue,\n              errors,\n              this.props.selected.attributes\n            )\n          }\n          postSub={(values) => this.postSubBroker(values)}\n          updateObject={(id, values) => {\n            this.props.dispatch(updateCompany({ id: id, values: values }));\n          }}\n          deleteObject={(id) => {\n            this.props.dispatch(deleteCompany(id));\n          }}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCompanyContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.companies;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect };\n}\n\nexport default connect(mapStateToProps)(CompanyContainer);\n"]},"metadata":{},"sourceType":"module"}