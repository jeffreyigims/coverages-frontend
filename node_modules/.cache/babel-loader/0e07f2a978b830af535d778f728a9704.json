{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports, postSport, fetchSport, updateSport, dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports = state.sports.concat(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    }\n  }\n});\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: {\n    alerts: []\n  },\n  reducers: {},\n  extraReducers: {\n    [updateSport.fulfilled]: (state, action) => {\n      state.alerts = state.alerts.concat({\n        message: \"The object was successfully added to the system.\",\n        variant: \"success\"\n      });\n    },\n    [alerts.dismissAlert]: (state, action) => {\n      state.alerts = state.alerts.splice(action.index);\n    }\n  }\n});\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alertsSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","postSport","fetchSport","updateSport","dismissAlert","createSlice","createAction","initialState","sports","status","error","selected","sportsSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","concat","alertsSlice","alerts","message","variant","splice","index","reducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport {\n  fetchSports,\n  postSport,\n  fetchSport,\n  updateSport,\n  dismissAlert,\n} from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null,\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports = state.sports.concat(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n  },\n});\n\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: { alerts: [] },\n  reducers: {},\n  extraReducers: {\n    [updateSport.fulfilled]: (state, action) => {\n      state.alerts = state.alerts.concat({\n        message: \"The object was successfully added to the system.\",\n        variant: \"success\",\n      });\n    },\n    [alerts.dismissAlert]: (state, action) => {\n      state.alerts = state.alerts.splice(action.index);\n    },\n  },\n});\n\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alertsSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}