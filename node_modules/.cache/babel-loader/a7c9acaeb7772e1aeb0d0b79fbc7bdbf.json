{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/survey/src/containers/brokers/BrokerContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DetailStructure from \"../../components/DetailStructure\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport PaginatedTable from \"../../components/PaginatedTable\";\nimport { brokers as formHelpers } from \"../../utils/Schemas\";\nimport { brokerForm as form } from \"../../utils/Forms\";\nimport { fetchBroker, updateBroker, deleteBroker, fetchCoverages } from \"../../actions/Actions\";\n\nclass BrokerContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"broker\",\n      id: this.props.match.params.id\n    };\n\n    this.showDetails = object => {\n      let showObjects = objects => {\n        return objects.map((object, index) => {\n          return /*#__PURE__*/React.createElement(\"tr\", {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            width: \"200\",\n            align: \"left\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            variant: \"link\",\n            href: \"/clubs/\" + object.attributes.club.id,\n            style: {\n              color: \"black\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }\n          }, object.attributes.club.name)), /*#__PURE__*/React.createElement(\"td\", {\n            width: \"200\",\n            align: \"left\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 13\n            }\n          }, object.attributes.group.name), /*#__PURE__*/React.createElement(\"td\", {\n            width: \"200\",\n            align: \"left\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 13\n            }\n          }, object.attributes.start_date), /*#__PURE__*/React.createElement(\"td\", {\n            width: \"200\",\n            align: \"left\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 13\n            }\n          }, object.attributes.verified ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"td\", {\n            width: \"100\",\n            align: \"center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            variant: \"link\",\n            href: \"/coverages/\" + object.attributes.id,\n            style: {\n              color: \"black\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }\n          })));\n        });\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaginatedTable, {\n        objects: this.props.coverages,\n        showObjects: showObjects,\n        tableHeaders: [\"Club\", \"Group\", \"Start\", \"Verified\", \"View\"],\n        onPageChange: (e, {\n          activePage\n        }) => this.props.dispatch(fetchCoverages({\n          for_broker: this.state.id,\n          page: activePage\n        })),\n        defaultActivePage: this.props.page,\n        totalPages: this.props.pages,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchBroker(this.state.id));\n    this.props.dispatch(fetchCoverages({\n      for_broker: this.state.id\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DetailStructure, {\n      object: this.props.selected,\n      status: this.props.status,\n      name: this.state.name,\n      formHelpers: formHelpers,\n      form: form,\n      showDetails: this.showDetails,\n      updateObject: (id, values) => {\n        this.props.dispatch(updateBroker({\n          id: id,\n          values: values\n        }));\n      },\n      deleteObject: id => {\n        this.props.dispatch(deleteBroker(id));\n      },\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nBrokerContainer.propTypes = {\n  selected: PropTypes.object,\n  status: PropTypes.string.isRequired,\n  errors: PropTypes.object,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    error\n  } = state.brokers;\n  const {\n    coverages,\n    pages,\n    page\n  } = state.coverages;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  const status = state.brokers.status;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    coverages,\n    pages,\n    page\n  };\n}\n\nexport default connect(mapStateToProps)(BrokerContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/containers/brokers/BrokerContainer.js"],"names":["React","Component","connect","DetailStructure","PropTypes","Button","PaginatedTable","brokers","formHelpers","brokerForm","form","fetchBroker","updateBroker","deleteBroker","fetchCoverages","BrokerContainer","state","name","id","props","match","params","showDetails","object","showObjects","objects","map","index","attributes","club","color","group","start_date","verified","coverages","e","activePage","dispatch","for_broker","page","pages","componentDidMount","render","selected","status","values","link","redirect","propTypes","string","isRequired","errors","bool","mapStateToProps","error","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DetailStructure from \"../../components/DetailStructure\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport PaginatedTable from \"../../components/PaginatedTable\";\nimport { brokers as formHelpers } from \"../../utils/Schemas\";\nimport { brokerForm as form } from \"../../utils/Forms\";\nimport {\n  fetchBroker,\n  updateBroker,\n  deleteBroker,\n  fetchCoverages,\n} from \"../../actions/Actions\";\n\nclass BrokerContainer extends Component {\n  state = {\n    name: \"broker\",\n    id: this.props.match.params.id,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchBroker(this.state.id));\n    this.props.dispatch(fetchCoverages({ for_broker: this.state.id }));\n  }\n\n  showDetails = (object) => {\n    let showObjects = (objects) => {\n      return objects.map((object, index) => {\n        return (\n          <tr key={index}>\n            <td width=\"200\" align=\"left\">\n              <Button\n                variant=\"link\"\n                href={\"/clubs/\" + object.attributes.club.id}\n                style={{ color: \"black\" }}\n              >\n                {object.attributes.club.name}\n              </Button>\n            </td>\n            <td width=\"200\" align=\"left\">\n              {object.attributes.group.name}\n            </td>\n            <td width=\"200\" align=\"left\">\n              {object.attributes.start_date}\n            </td>\n            <td width=\"200\" align=\"left\">\n              {object.attributes.verified ? \"true\" : \"false\"}\n            </td>\n            <td width=\"100\" align=\"center\">\n              <Button\n                variant=\"link\"\n                href={\"/coverages/\" + object.attributes.id}\n                style={{ color: \"black\" }}\n              >\n                {/* <EyeFill /> */}\n              </Button>\n            </td>\n          </tr>\n        );\n      });\n    };\n\n    return (\n      <>\n        <PaginatedTable\n          objects={this.props.coverages}\n          showObjects={showObjects}\n          tableHeaders={[\"Club\", \"Group\", \"Start\", \"Verified\", \"View\"]}\n          onPageChange={(e, { activePage }) =>\n            this.props.dispatch(\n              fetchCoverages({ for_broker: this.state.id, page: activePage })\n            )\n          }\n          defaultActivePage={this.props.page}\n          totalPages={this.props.pages}\n        />\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <DetailStructure\n          object={this.props.selected}\n          status={this.props.status}\n          name={this.state.name}\n          formHelpers={formHelpers}\n          form={form}\n          showDetails={this.showDetails}\n          updateObject={(id, values) => {\n            this.props.dispatch(updateBroker({ id: id, values: values }));\n          }}\n          deleteObject={(id) => {\n            this.props.dispatch(deleteBroker(id));\n          }}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nBrokerContainer.propTypes = {\n  selected: PropTypes.object,\n  status: PropTypes.string.isRequired,\n  errors: PropTypes.object,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, error } = state.brokers;\n  const { coverages, pages, page } = state.coverages;\n  const { link, redirect } = state.redirections;\n  const status = state.brokers.status\n  return { selected, status, error, link, redirect, coverages, pages, page };\n}\n\nexport default connect(mapStateToProps)(BrokerContainer);\n"]},"metadata":{},"sourceType":"module"}