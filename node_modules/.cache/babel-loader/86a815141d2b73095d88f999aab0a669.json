{"ast":null,"code":"import { runAjax } from \"../../utils/APIUtils\";\nimport { createAsyncThunk, createAction } from \"@reduxjs/toolkit\";\nexport const fetchSports = createAsyncThunk(\"sports/fetchSports\", async () => {\n  const response = await runAjax(\"/sports.json\", \"GET\", {});\n  return response;\n});\nexport const postSport = createAsyncThunk(\"sports/postSport\", async values => {\n  const response = await runAjax(\"sports.json\", \"POST\", {\n    sport: values\n  });\n  return response;\n});\nexport const fetchSport = createAsyncThunk(\"sports/fetchSport\", async id => {\n  const response = await runAjax(url.concat(\"/\" + id + \".json\"), \"GET\", {});\n  return response;\n});\nexport const updateSport = createAsyncThunk(\"sports/updateSport\", async params => {\n  const response = await runAjax(url.concat(\"/\" + params.id + \".json\"), \"PATCH\", {\n    sport: params.values\n  });\n  return response;\n});\nexport const deleteSport = createAsyncThunk(\"sports/deleteSport\", async id => {\n  const response = await runAjax(url.concat(\"/\" + id + \".json\"), \"DELETE\", {});\n  return id;\n});\nexport const sportsSlice = createSlice({\n  name: \"sports\",\n  initialState: {\n    sports: [],\n    status: \"idle\",\n    error: null,\n    selected: null\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n    }\n  }\n});","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/data/sports.js"],"names":["runAjax","createAsyncThunk","createAction","fetchSports","response","postSport","values","sport","fetchSport","id","url","concat","updateSport","params","deleteSport","sportsSlice","createSlice","name","initialState","sports","status","error","selected","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","push"],"mappings":"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","sourcesContent":["import { runAjax } from \"../../utils/APIUtils\";\nimport { createAsyncThunk, createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchSports = createAsyncThunk(\"sports/fetchSports\", async () => {\n  const response = await runAjax(\"/sports.json\", \"GET\", {});\n  return response;\n});\n\nexport const postSport = createAsyncThunk(\n  \"sports/postSport\",\n  async (values) => {\n    const response = await runAjax(\"sports.json\", \"POST\", {\n      sport: values,\n    });\n    return response;\n  }\n);\n\nexport const fetchSport = createAsyncThunk(\"sports/fetchSport\", async (id) => {\n  const response = await runAjax(url.concat(\"/\" + id + \".json\"), \"GET\", {});\n  return response;\n});\n\nexport const updateSport = createAsyncThunk(\n  \"sports/updateSport\",\n  async (params) => {\n    const response = await runAjax(\n      url.concat(\"/\" + params.id + \".json\"),\n      \"PATCH\",\n      { sport: params.values }\n    );\n    return response;\n  }\n);\n\nexport const deleteSport = createAsyncThunk(\n  \"sports/deleteSport\",\n  async (id) => {\n    const response = await runAjax(\n      url.concat(\"/\" + id + \".json\"),\n      \"DELETE\",\n      {}\n    );\n    return id;\n  }\n);\n\nexport const sportsSlice = createSlice({\n    name: \"sports\",\n    initialState: {\n      sports: [],\n      status: \"idle\",\n      error: null,\n      selected: null,\n    },\n    reducers: {},\n    extraReducers: {\n      [fetchSports.pending]: (state, action) => {\n        state.status = \"loading\";\n      },\n      [fetchSports.fulfilled]: (state, action) => {\n        state.sports = action.payload.data;\n        state.status = \"succeeded\";\n      },\n      [fetchSports.rejected]: (state, action) => {\n        state.error = action.error;\n        state.status = \"failed\";\n      },\n      [postSport.fulfilled]: (state, action) => {\n        state.sports.push(action.payload.data);\n      },\n      [postSport.rejected]: (state, action) => {},\n      [fetchSport.pending]: (state, action) => {\n        state.status = \"loading\";\n      },\n      [fetchSport.fulfilled]: (state, action) => {\n        state.selected = action.payload.data;\n        state.status = \"succeeded\";\n      },\n      [fetchSport.rejected]: (state, action) => {\n        state.error = action.error;\n        state.status = \"failed\";\n      },\n      [updateSport.fulfilled]: (state, action) => {\n        state.selected = action.payload.data;\n        state.status = \"succeeded\";\n      },\n      [updateSport.rejected]: (state, action) => {\n        state.error = action.error;\n        state.status = \"failed\";\n      },\n      [deleteSport.fulfilled]: (state, action) => {\n        state.status = \"succeeded\";\n      },\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}