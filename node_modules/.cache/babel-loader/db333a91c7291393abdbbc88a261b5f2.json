{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports, postSport, fetchSport, updateSport } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports = state.sports.concat(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    }\n  }\n});\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: {\n    alerts: []\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      console.log(\"PENDING\");\n    }\n  }\n});\nconst reducer = combineReducers({\n  sport: sportsSlice.reducer,\n  alert: alertsSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","postSport","fetchSport","updateSport","createSlice","createAction","initialState","sports","status","error","selected","sportsSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","concat","alertsSlice","alerts","console","log","reducer","sport","alert"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport {\n  fetchSports,\n  postSport,\n  fetchSport,\n  updateSport,\n} from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null,\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports = state.sports.concat(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n  },\n});\n\nconst alertsSlice = createSlice({\n  name: \"alerts\",\n  initialState: { alerts: [] },\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      console.log(\"PENDING\");\n    },\n  },\n});\n\nconst reducer = combineReducers({ sport: sportsSlice.reducer, alert: alertsSlice.reducer });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}