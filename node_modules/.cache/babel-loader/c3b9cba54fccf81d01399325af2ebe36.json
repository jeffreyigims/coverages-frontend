{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport { fetchCoverage, updateCoverage, postCoverageBroker, deleteCoverageBroker, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.includes = (arr, object) => {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i].data.attributes.broker_id == object) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleBrokers = objects => {\n      console.log(\"JJ\"); // Get array of current associated brokers\n\n      let curr = this.props.selected.attributes.coverage_brokers;\n      let needAdded = objects.filter(object => !this.includes(curr, object));\n      let needDestroyed = curr.filter(object => !objects.includes(object.data.attributes.broker_id));\n      console.log(needDestroyed);\n      needAdded.map(object => this.props.dispatch(postCoverageBroker({\n        coverage_id: this.props.selected.attributes.id,\n        broker_id: object\n      })));\n      needDestroyed.map(object => this.props.dispatch(deleteCoverageBroker(object.data.attributes.id)));\n    };\n\n    this.updateCoverage = values => {\n      const coverage = {\n        notes: values.notes,\n        start_date: values.satrt_date,\n        end_date: values.end_date,\n        has_coverage_line: values.has_coverage_line,\n        verified: values.verified\n      };\n      this.props.dispatch(updateCoverage({\n        id: this.props.selected.attributes.id,\n        values: coverage\n      }));\n      this.handleBrokers(values.brokers);\n    };\n\n    this.deleteCoverage = values => {\n      console.log(\"Delete\");\n    };\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CoverageDetails, {\n      object: this.props.selected,\n      carriers: this.props.carriers,\n      brokers: this.props.brokers,\n      status: this.props.status,\n      formHelpers: formHelpers,\n      submit: values => this.updateCoverage(values),\n      deleteObject: values => this.deleteCoverage(values),\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","PropTypes","coverages","formHelpers","CoverageDetails","fetchCoverage","updateCoverage","postCoverageBroker","deleteCoverageBroker","fetchCarriers","fetchBrokers","CoverageContainer","includes","arr","object","i","length","data","attributes","broker_id","handleBrokers","objects","console","log","curr","props","selected","coverage_brokers","needAdded","filter","needDestroyed","map","dispatch","coverage_id","id","values","coverage","notes","start_date","satrt_date","end_date","has_coverage_line","verified","brokers","deleteCoverage","componentDidMount","match","params","render","carriers","status","link","redirect","propTypes","isRequired","string","error","bool","mapStateToProps","state","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport {\n  fetchCoverage,\n  updateCoverage,\n  postCoverageBroker,\n  deleteCoverageBroker,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  includes = (arr, object) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].data.attributes.broker_id == object) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  handleBrokers = (objects) => {\n    console.log(\"JJ\")\n    // Get array of current associated brokers\n    let curr = this.props.selected.attributes.coverage_brokers;\n    let needAdded = objects.filter((object) => !this.includes(curr, object));\n    let needDestroyed = curr.filter(\n      (object) => !objects.includes(object.data.attributes.broker_id)\n    );\n    console.log(needDestroyed)\n    needAdded.map((object) =>\n      this.props.dispatch(\n        postCoverageBroker({\n          coverage_id: this.props.selected.attributes.id,\n          broker_id: object,\n        })\n      )\n    );\n    needDestroyed.map((object) =>\n      this.props.dispatch(deleteCoverageBroker(object.data.attributes.id))\n    );\n  };\n\n  updateCoverage = (values) => {\n    const coverage = {\n      notes: values.notes,\n      start_date: values.satrt_date,\n      end_date: values.end_date,\n      has_coverage_line: values.has_coverage_line,\n      verified: values.verified,\n    };\n    this.props.dispatch(\n      updateCoverage({\n        id: this.props.selected.attributes.id,\n        values: coverage,\n      })\n    );\n    this.handleBrokers(values.brokers);\n  };\n\n  deleteCoverage = (values) => {\n    console.log(\"Delete\");\n  };\n\n  render() {\n    return (\n      <>\n        <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.props.brokers}\n          status={this.props.status}\n          formHelpers={formHelpers}\n          submit={(values) => this.updateCoverage(values)}\n          deleteObject={(values) => this.deleteCoverage(values)}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}