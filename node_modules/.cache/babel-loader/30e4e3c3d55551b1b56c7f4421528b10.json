{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport { fetchCoverage, updateCoverage, deleteCoverage, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateCoverages = values => {\n      console.log(\"Update\");\n    };\n\n    this.deleteCoverages = values => {\n      console.log(\"Delete\");\n    };\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CoverageDetails, {\n      object: this.props.selected,\n      carriers: this.props.carriers,\n      brokers: this.props.brokers,\n      status: this.props.status,\n      formHelpers: formHelpers,\n      updateObject: values => updateCoverage(values),\n      deleteObject: values => deleteCoverage(values),\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","PropTypes","coverages","formHelpers","CoverageDetails","fetchCoverage","updateCoverage","deleteCoverage","fetchCarriers","fetchBrokers","CoverageContainer","updateCoverages","values","console","log","deleteCoverages","componentDidMount","id","props","match","params","dispatch","render","selected","carriers","brokers","status","link","redirect","propTypes","object","isRequired","string","error","bool","mapStateToProps","state","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport {\n  fetchCoverage,\n  updateCoverage,\n  deleteCoverage,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  updateCoverages = (values) => {\n    console.log(\"Update\")\n  }\n\n  deleteCoverages = (values) => {\n    console.log(\"Delete\")\n  }\n\n  render() {\n    return (\n      <>\n        <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.props.brokers}\n          status={this.props.status}\n          formHelpers={formHelpers}\n          updateObject={(values) => updateCoverage(values)}\n          deleteObject={(values) => deleteCoverage(values)}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}