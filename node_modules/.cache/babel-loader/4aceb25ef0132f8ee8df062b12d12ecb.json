{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { dismissAlert, deleteSport, deleteLeague } from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst fulfilledNew = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledUpdated = state => state.alerts.push({\n  message: \"The object was successfully updated in the system.\",\n  variant: \"success\"\n});\n\nconst fulfilledDeleted = state => state.alerts.push({\n  message: \"The object was successfully deleted in the system.\",\n  variant: \"success\"\n});\n\nconst rejected = state => state.alerts.push({\n  message: \"The action could not be completed at this time.\",\n  variant: \"danger\"\n});\n\nfunction alerts(state = {\n  alerts: []\n}, action) {\n  if (action.type === \"alerts/dismissAlert\") {\n    return {\n      alerts: []\n    };\n  }\n\n  const status = action.type.split(\"/\").pop();\n  const new_action = action.type.split(\"/\")[1].split(\"_\")[0];\n  console.log(new_action, status);\n\n  switch ([new_action, status]) {\n    case [\"post\", \"fulfilled\"]:\n      console.log(\"JJ\");\n      return fulfilledNew(state);\n\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: \"\",\n    redirect: false\n  },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    }\n  }\n});\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    error: null,\n    selected: null\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `${name}/fetch_${name}/pending`:\n        return Object.assign({}, state, {\n          status: \"loading\"\n        });\n\n      case `${name}/fetch_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/post_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/post_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: state[name].concat(action.payload.data),\n          status: \"succeeded\"\n        });\n\n      case `${name}/get_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/get_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/update_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/update_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\"\n        });\n\n      case `${name}/delete_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\"\n        });\n\n      case `${name}/delete_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          status: \"succeeded\"\n        });\n\n      default:\n        return state;\n    }\n  };\n}\n\nconst reducer = combineReducers({\n  sports: createTableReducer(\"sports\"),\n  leagues: createTableReducer(\"leagues\"),\n  alerts: alerts,\n  redirections: redirectionSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/Reducers.js"],"names":["combineReducers","dismissAlert","deleteSport","deleteLeague","createSlice","fulfilledNew","state","alerts","concat","message","variant","fulfilledUpdated","push","fulfilledDeleted","rejected","action","type","status","split","pop","new_action","console","log","redirectionSlice","name","initialState","link","redirect","reducers","extraReducers","fulfilled","createTableReducer","error","selected","reducer","Object","assign","payload","data","sports","leagues","redirections"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport { dismissAlert, deleteSport, deleteLeague } from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst fulfilledNew = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledUpdated = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\",\n  });\n\nconst fulfilledDeleted = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\",\n  });\n\nconst rejected = (state) =>\n  state.alerts.push({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n  });\n\nfunction alerts(state = { alerts: [] }, action) {\n  if (action.type === \"alerts/dismissAlert\") {\n    return { alerts: [] };\n  }\n  const status = action.type.split(\"/\").pop();\n  const new_action = action.type.split(\"/\")[1].split(\"_\")[0];\n  console.log(new_action, status);\n  switch ([new_action, status]) {\n    case ([\"post\", \"fulfilled\"]):\n      console.log(\"JJ\");\n      return fulfilledNew(state);\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: \"\", redirect: false },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n    [deleteLeague.fulfilled]: (state, action) => {\n      state.link = \"/leagues\";\n      state.redirect = true;\n    },\n  },\n});\n\nfunction createTableReducer(name = \"\") {\n  let initialState = {\n    [name]: [],\n    status: \"idle\",\n    error: null,\n    selected: null,\n  };\n  return function reducer(state = initialState, action) {\n    switch (action.type) {\n      case `${name}/fetch_${name}/pending`:\n        return Object.assign({}, state, {\n          status: \"loading\",\n        });\n      case `${name}/fetch_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/fetch_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/post_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/post_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          [name]: state[name].concat(action.payload.data),\n          status: \"succeeded\",\n        });\n      case `${name}/get_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/get_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/update_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/update_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          selected: action.payload.data,\n          status: \"succeeded\",\n        });\n      case `${name}/delete_${name}/rejected`:\n        return Object.assign({}, state, {\n          status: \"failed\",\n        });\n      case `${name}/delete_${name}/fulfilled`:\n        return Object.assign({}, state, {\n          status: \"succeeded\",\n        });\n      default:\n        return state;\n    }\n  };\n}\n\nconst reducer = combineReducers({\n  sports: createTableReducer(\"sports\"),\n  leagues: createTableReducer(\"leagues\"),\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}