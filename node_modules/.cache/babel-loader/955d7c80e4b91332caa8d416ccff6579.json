{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport { fetchCoverage, updateCoverageAssociations, postCoverageBroker, deleteCoverageBroker, postCoverageCarrier, deleteCoverageCarrier, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.includes = (arr, object, target) => {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i].data.attributes[target] == object) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleBrokers = objects => {\n      // Get array of current associated brokers\n      let curr = this.props.selected.attributes.coverage_brokers;\n      let needAdded = objects.filter(object => !this.includes(curr, object, \"broker_id\"));\n      let needDestroyed = curr.filter(object => !objects.includes(object.data.attributes.broker_id)).map(object => object.data.attributes.id);\n      return {\n        needAdded: needAdded,\n        needDestroyed: needDestroyed\n      };\n    };\n\n    this.handleCarriers = objects => {\n      // Get array of current associated carriers\n      let curr = this.props.selected.attributes.coverage_carriers;\n      let needAdded = objects.filter(object => !this.includes(curr, object, \"carrier_id\"));\n      let needDestroyed = curr.filter(object => !objects.includes(object.data.attributes.carrier_id)).map(object => object.data.attributes.id);\n      return {\n        needAdded: needAdded,\n        needDestroyed: needDestroyed\n      };\n    };\n\n    this.updateCoverage = values => {\n      const coverage = {\n        notes: values.notes,\n        start_date: values.satrt_date,\n        end_date: values.end_date,\n        has_coverage_line: values.has_coverage_line,\n        verified: values.verified\n      };\n      let brokers = this.handleBrokers(values.brokers);\n      let carriers = this.handleCarriers(values.carriers);\n      this.props.dispatch(updateCoverageAssociations({\n        id: this.props.selected.attributes.id,\n        values: coverage\n      }, carriers, brokers));\n    };\n\n    this.deleteCoverage = values => {\n      console.log(\"Delete\");\n    };\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CoverageDetails, {\n      object: this.props.selected,\n      carriers: this.props.carriers,\n      brokers: this.props.brokers,\n      status: this.props.status,\n      formHelpers: formHelpers,\n      submit: values => this.updateCoverage(values),\n      deleteObject: values => this.deleteCoverage(values),\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","PropTypes","coverages","formHelpers","CoverageDetails","fetchCoverage","updateCoverageAssociations","postCoverageBroker","deleteCoverageBroker","postCoverageCarrier","deleteCoverageCarrier","fetchCarriers","fetchBrokers","CoverageContainer","includes","arr","object","target","i","length","data","attributes","handleBrokers","objects","curr","props","selected","coverage_brokers","needAdded","filter","needDestroyed","broker_id","map","id","handleCarriers","coverage_carriers","carrier_id","updateCoverage","values","coverage","notes","start_date","satrt_date","end_date","has_coverage_line","verified","brokers","carriers","dispatch","deleteCoverage","console","log","componentDidMount","match","params","render","status","link","redirect","propTypes","isRequired","string","error","bool","mapStateToProps","state","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport {\n  fetchCoverage,\n  updateCoverageAssociations,\n  postCoverageBroker,\n  deleteCoverageBroker,\n  postCoverageCarrier,\n  deleteCoverageCarrier,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  includes = (arr, object, target) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].data.attributes[target] == object) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  handleBrokers = (objects) => {\n    // Get array of current associated brokers\n    let curr = this.props.selected.attributes.coverage_brokers;\n    let needAdded = objects.filter(\n      (object) => !this.includes(curr, object, \"broker_id\")\n    );\n    let needDestroyed = curr\n      .filter((object) => !objects.includes(object.data.attributes.broker_id))\n      .map((object) => object.data.attributes.id);\n    return { needAdded: needAdded, needDestroyed: needDestroyed };\n  };\n\n  handleCarriers = (objects) => {\n    // Get array of current associated carriers\n    let curr = this.props.selected.attributes.coverage_carriers;\n    let needAdded = objects.filter(\n      (object) => !this.includes(curr, object, \"carrier_id\")\n    );\n    let needDestroyed = curr\n      .filter((object) => !objects.includes(object.data.attributes.carrier_id))\n      .map((object) => object.data.attributes.id);\n    return { needAdded: needAdded, needDestroyed: needDestroyed };\n  };\n\n  updateCoverage = (values) => {\n    const coverage = {\n      notes: values.notes,\n      start_date: values.satrt_date,\n      end_date: values.end_date,\n      has_coverage_line: values.has_coverage_line,\n      verified: values.verified,\n    };\n    let brokers = this.handleBrokers(values.brokers);\n    let carriers = this.handleCarriers(values.carriers);\n    this.props.dispatch(\n      updateCoverageAssociations(\n        {\n          id: this.props.selected.attributes.id,\n          values: coverage,\n        },\n        carriers,\n        brokers\n      )\n    );\n  };\n\n  deleteCoverage = (values) => {\n    console.log(\"Delete\");\n  };\n\n  render() {\n    return (\n      <>\n        <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.props.brokers}\n          status={this.props.status}\n          formHelpers={formHelpers}\n          submit={(values) => this.updateCoverage(values)}\n          deleteObject={(values) => this.deleteCoverage(values)}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}