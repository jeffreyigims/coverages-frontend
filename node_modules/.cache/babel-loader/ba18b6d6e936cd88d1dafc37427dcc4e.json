{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport { fetchCoverage, updateCoverage, deleteCoverageAssociations, fetchCarriers, fetchBrokers } from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.includes = (arr, object) => {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i].data.attributes.broker_id == item) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleBrokers = objects => {\n      // Get array of current associated brokers\n      let curr = this.props.selected.attributes.coverage_brokers;\n      let needAdded = objects.filter(object => !this.includes(curr, object));\n      let needDestroyed = curr.filter(object => !objects.includes(object.data.attributes.broker_id));\n      needAdded.map(object => this.props.dispatch(postCoverageBroker({\n        coverage_id: this.props.selected.attributes.id,\n        broker_id: object\n      })));\n      needDestroyed.map(object => this.props.dispatch(deleteCoverageBroker(object.attributes.id)));\n    };\n\n    this.updateCoverage = values => {\n      const coverage = {\n        notes: values.notes,\n        start_date: values.satrt_date,\n        end_date: values.end_date,\n        has_coverage_line: values.has_coverage_line,\n        verified: values.verified\n      };\n      this.props.dispatch(updateCoverage(coverage));\n      this.handleBrokers(values.brokers);\n    };\n\n    this.deleteCoverage = values => {\n      console.log(\"Delete\");\n    };\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CoverageDetails, {\n      object: this.props.selected,\n      carriers: this.props.carriers,\n      brokers: this.props.brokers,\n      status: this.props.status,\n      formHelpers: formHelpers,\n      submit: values => this.updateCoverage(values),\n      deleteObject: values => this.deleteCoverage(values),\n      redirection: {\n        link: this.props.link,\n        redirect: this.props.redirect\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected,\n    status,\n    error\n  } = state.coverages;\n  const {\n    carriers\n  } = state.carriers;\n  const {\n    brokers\n  } = state.brokers;\n  const {\n    link,\n    redirect\n  } = state.redirections;\n  return {\n    selected,\n    status,\n    error,\n    link,\n    redirect,\n    carriers,\n    brokers\n  };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/Coverages/Front/src/containers/coverages/CoverageContainer.js"],"names":["React","Component","connect","PropTypes","coverages","formHelpers","CoverageDetails","fetchCoverage","updateCoverage","deleteCoverageAssociations","fetchCarriers","fetchBrokers","CoverageContainer","includes","arr","object","i","length","data","attributes","broker_id","item","handleBrokers","objects","curr","props","selected","coverage_brokers","needAdded","filter","needDestroyed","map","dispatch","postCoverageBroker","coverage_id","id","deleteCoverageBroker","values","coverage","notes","start_date","satrt_date","end_date","has_coverage_line","verified","brokers","deleteCoverage","console","log","componentDidMount","match","params","render","carriers","status","link","redirect","propTypes","isRequired","string","error","bool","mapStateToProps","state","redirections"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { coverages as formHelpers } from \"../../utils/Schemas\";\nimport CoverageDetails from \"./CoverageDetails\";\nimport {\n  fetchCoverage,\n  updateCoverage,\n  deleteCoverageAssociations,\n  fetchCarriers,\n  fetchBrokers,\n} from \"../../actions/Actions\";\n\nclass CoverageContainer extends Component {\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    this.props.dispatch(fetchCoverage(id));\n    this.props.dispatch(fetchCarriers());\n    this.props.dispatch(fetchBrokers());\n  }\n\n  includes = (arr, object) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].data.attributes.broker_id == item) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  handleBrokers = (objects) => {\n    // Get array of current associated brokers\n    let curr = this.props.selected.attributes.coverage_brokers;\n    let needAdded = objects.filter((object) => !this.includes(curr, object));\n    let needDestroyed = curr.filter(\n      (object) => !objects.includes(object.data.attributes.broker_id)\n    );\n    needAdded.map((object) =>\n      this.props.dispatch(\n        postCoverageBroker({\n          coverage_id: this.props.selected.attributes.id,\n          broker_id: object,\n        })\n      )\n    );\n    needDestroyed.map((object) =>\n      this.props.dispatch(deleteCoverageBroker(object.attributes.id))\n    );\n  };\n\n  updateCoverage = (values) => {\n    const coverage = {\n      notes: values.notes,\n      start_date: values.satrt_date,\n      end_date: values.end_date,\n      has_coverage_line: values.has_coverage_line,\n      verified: values.verified,\n    };\n    this.props.dispatch(updateCoverage(coverage));\n    this.handleBrokers(values.brokers);\n  };\n\n  deleteCoverage = (values) => {\n    console.log(\"Delete\");\n  };\n\n  render() {\n    return (\n      <>\n        <CoverageDetails\n          object={this.props.selected}\n          carriers={this.props.carriers}\n          brokers={this.props.brokers}\n          status={this.props.status}\n          formHelpers={formHelpers}\n          submit={(values) => this.updateCoverage(values)}\n          deleteObject={(values) => this.deleteCoverage(values)}\n          redirection={{ link: this.props.link, redirect: this.props.redirect }}\n        />\n      </>\n    );\n  }\n}\n\nCoverageContainer.propTypes = {\n  selected: PropTypes.object.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  redirect: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  const { selected, status, error } = state.coverages;\n  const { carriers } = state.carriers;\n  const { brokers } = state.brokers;\n  const { link, redirect } = state.redirections;\n  return { selected, status, error, link, redirect, carriers, brokers };\n}\n\nexport default connect(mapStateToProps)(CoverageContainer);\n"]},"metadata":{},"sourceType":"module"}