{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports, postSport, fetchSport, updateSport, deleteSport, dismissAlert } from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n    }\n  }\n});\n\nconst fulfilledNew = state => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\"\n  });\n  return {\n    alerts\n  };\n};\n\nconst fulfilledUpdated = state => state.alerts.push({\n  message: \"The object was successfully updated in the system.\",\n  variant: \"success\"\n});\n\nconst fulfilledDeleted = state => state.alerts.push({\n  message: \"The object was successfully deleted in the system.\",\n  variant: \"success\"\n});\n\nconst rejected = state => state.alerts.push({\n  message: \"The action could not be completed at this time.\",\n  variant: \"danger\"\n}); // const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\n\nfunction alerts(state = {\n  alerts: []\n}, action) {\n  switch (action.type, action.type.split(\"/\").pop()) {\n    case (\"\", \"fulfilled\"):\n      return fulfilledNew(state);\n\n    case (\"dismissAlert\", \"\"):\n      let alerts = [];\n      return {\n        alerts\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: {\n    link: \"\",\n    redirect: false\n  },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    }\n  }\n});\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","postSport","fetchSport","updateSport","deleteSport","dismissAlert","createSlice","createAction","initialState","sports","status","error","selected","sportsSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","data","rejected","push","fulfilledNew","alerts","concat","message","variant","fulfilledUpdated","fulfilledDeleted","type","split","pop","redirectionSlice","link","redirect","reducer","redirections"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport {\n  fetchSports,\n  postSport,\n  fetchSport,\n  updateSport,\n  deleteSport,\n  dismissAlert,\n} from \"./actions/Actions\";\nimport { createSlice, createAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  sports: [],\n  status: \"idle\",\n  error: null,\n  selected: null,\n};\nconst sportsSlice = createSlice({\n  name: \"sports\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchSports.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSports.fulfilled]: (state, action) => {\n      state.sports = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSports.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [postSport.fulfilled]: (state, action) => {\n      state.sports.push(action.payload.data);\n    },\n    [postSport.rejected]: (state, action) => {},\n    [fetchSport.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [fetchSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [updateSport.fulfilled]: (state, action) => {\n      state.selected = action.payload.data;\n      state.status = \"succeeded\";\n    },\n    [updateSport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.status = \"failed\";\n    },\n    [deleteSport.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n    },\n  },\n});\n\nconst fulfilledNew = (state) => {\n  let alerts = state.alerts.concat({\n    message: \"The object was successfully added to the system.\",\n    variant: \"success\",\n  });\n  return { alerts };\n};\n\nconst fulfilledUpdated = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully updated in the system.\",\n    variant: \"success\",\n  });\n\nconst fulfilledDeleted = (state) =>\n  state.alerts.push({\n    message: \"The object was successfully deleted in the system.\",\n    variant: \"success\",\n  });\n\nconst rejected = (state) =>\n  state.alerts.push({\n    message: \"The action could not be completed at this time.\",\n    variant: \"danger\",\n  });\n\n// const alertsSlice = createSlice({\n//   name: \"alerts\",\n//   initialState: { alerts: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [postSport.fulfilled]: (state, action) => {\n//       fulfilledNew(state);\n//     },\n//     [updateSport.rejected]: (state, action) => {\n//       rejected(state);\n//     },\n//     [dismissAlert]: (state, action) => {\n//       state.alerts.splice(action.payload, 1);\n//     },\n//   },\n// });\n\nfunction alerts(state = { alerts: [] }, action) {\n  switch ((action.type, action.type.split(\"/\").pop())) {\n    case (\"\", \"fulfilled\"):\n      return fulfilledNew(state);\n    case (\"dismissAlert\", \"\"):\n      let alerts = []\n      return { alerts };\n    default:\n      return state;\n  }\n}\n\nconst redirectionSlice = createSlice({\n  name: \"redirections\",\n  initialState: { link: \"\", redirect: false },\n  reducers: {},\n  extraReducers: {\n    [deleteSport.fulfilled]: (state, action) => {\n      state.link = \"/sports\";\n      state.redirect = true;\n    },\n  },\n});\n\nconst reducer = combineReducers({\n  sports: sportsSlice.reducer,\n  alerts: alerts,\n  redirections: redirectionSlice.reducer,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}