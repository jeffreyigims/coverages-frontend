{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports } from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\"; // function sports(\n//   state = {\n//     sports: [],\n//   },\n//   action\n// ) {\n//   switch (action.type) {\n//     case ActionTypes.REQUEST_SPORTS:\n//       return Object.assign({}, state, {});\n//     case ActionTypes.RECEIVE_SPORTS:\n//       return Object.assign({}, state, {\n//         sports: action.sports,\n//       });\n//     case ActionTypes.POST_SPORT:\n//       console.log(action.sport)\n//       return Object.assign({}, state, {\n//         sports: state.sports.concat(action.sport),\n//       });\n//     case [fetchSports.pending]:\n//       console.log(\"Pending\");\n//     default:\n//       return state;\n//   }\n// }\n\nconst initialState = {\n  sports: []\n};\nconst sportsSlice = createSlice({\n  name: 'sports',\n  initialState,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      state.posts = state.posts.concat(action.payload);\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nconst reducer = combineReducers({\n  sports\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/jeffreyigims/Documents/survey/src/reducers.js"],"names":["combineReducers","ActionTypes","fetchSports","createSlice","initialState","sports","sportsSlice","name","reducers","extraReducers","fetchPosts","pending","state","action","status","fulfilled","posts","concat","payload","rejected","error","message","reducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAArB;AACA,MAAMC,WAAW,GAAGH,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,QADwB;AAE9BH,EAAAA,YAF8B;AAG9BI,EAAAA,QAAQ,EAAE,CACR;AADQ,GAHoB;AAM9BC,EAAAA,aAAa,EAAE;AACb,KAACC,UAAU,CAACC,OAAZ,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACE,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACJ,UAAU,CAACK,SAAZ,GAAwB,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACE,MAAN,GAAe,WAAf,CADyC,CAEzC;;AACAF,MAAAA,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBJ,MAAM,CAACK,OAA1B,CAAd;AACD,KARY;AASb,KAACR,UAAU,CAACS,QAAZ,GAAuB,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACE,MAAN,GAAe,QAAf;AACAF,MAAAA,KAAK,CAACQ,KAAN,GAAcP,MAAM,CAACO,KAAP,CAAaC,OAA3B;AACD;AAZY;AANe,CAAD,CAA/B;AAsBA,MAAMC,OAAO,GAAGtB,eAAe,CAAC;AAAEK,EAAAA;AAAF,CAAD,CAA/B;AAEA,eAAeiB,OAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport ActionTypes from \"./constants/ActionTypes\";\nimport { fetchSports } from \"./actions/Actions\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// function sports(\n//   state = {\n//     sports: [],\n//   },\n//   action\n// ) {\n//   switch (action.type) {\n    \n//     case ActionTypes.REQUEST_SPORTS:\n//       return Object.assign({}, state, {});\n//     case ActionTypes.RECEIVE_SPORTS:\n//       return Object.assign({}, state, {\n//         sports: action.sports,\n//       });\n//     case ActionTypes.POST_SPORT:\n//       console.log(action.sport)\n//       return Object.assign({}, state, {\n//         sports: state.sports.concat(action.sport),\n//       });\n//     case [fetchSports.pending]:\n//       console.log(\"Pending\");\n//     default:\n//       return state;\n//   }\n// }\nconst initialState = { sports: [] }\nconst sportsSlice = createSlice({\n  name: 'sports',\n  initialState,\n  reducers: {\n    // omit existing reducers here\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      // Add any fetched posts to the array\n      state.posts = state.posts.concat(action.payload)\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    }\n  }\n})\n\nconst reducer = combineReducers({ sports });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}